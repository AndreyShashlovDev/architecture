version = '0.1.0'

apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'

apply from: '../checkstyle/checkstyle.gradle'

retrolambda {
    jvmArgs '-noverify'
}

def buildVersionName = getTeamcityPropertyString('app.version.name', version as String)
def buildVersionCode = getTeamcityPropertyInt('build.number', appVersionCode as int)

android {
    useLibrary 'org.apache.http.legacy'

    dexOptions {
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion appCompileSdkVersion
    buildToolsVersion appBuildToolsVersion

    defaultConfig {
        minSdkVersion appMinSdkVersion
        targetSdkVersion appTargetSdkVersion
        applicationId appApplicationId

        versionName buildVersionName
        versionCode buildVersionCode

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            multiDexEnabled false
        }

        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false
            multiDexEnabled true
        }
    }

    productFlavors {
        //use http://127.0.0.1/ only for demo!
        production {
            buildConfigField "String", "API_SERVICE_URL", "\"http://127.0.0.1/\""
            buildConfigField "long", "CONNECTION_TIME_OUT", "10"
        }

        internal {
            buildConfigField "String", "API_SERVICE_URL", "\"http://127.0.0.1/\""
            buildConfigField "long", "CONNECTION_TIME_OUT", "60"
        }
    }

    lintOptions {
        disable 'ExtraTranslation'
        checkReleaseBuilds false
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude '.readme'
    }
}

def Properties signingProps = new Properties()
def propFile = new File('android.signing.properties')
if (propFile.canRead()) {
    signingProps.load(new FileInputStream(propFile))

    if (signingProps != null && signingProps.containsKey('STORE_FILE') &&
            signingProps.containsKey('STORE_PASSWORD') && signingProps.containsKey('KEY_ALIAS') &&
            signingProps.containsKey('KEY_PASSWORD')) {

        android.signingConfigs.release.storeFile = file(signingProps['STORE_FILE'])
        android.signingConfigs.release.storePassword = signingProps['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = signingProps['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = signingProps['KEY_PASSWORD']

    } else {
        println 'android.signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }

} else {
    println 'android.signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:animated-vector-drawable:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:design:25.3.1'

    compile 'com.squareup.okhttp3:okhttp:3.7.0'
    compile 'com.squareup.okhttp3:okhttp-urlconnection:3.7.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.7.0'

    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'

    compile 'com.google.code.gson:gson:2.8.0'

    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'

    compile 'com.trello.rxlifecycle2:rxlifecycle:2.0.1'
    compile 'com.trello.rxlifecycle2:rxlifecycle-android:2.0.1'
    compile 'com.trello.rxlifecycle2:rxlifecycle-components:2.0.1'

    compile 'org.projectlombok:lombok:1.16.16'

    compile 'org.parceler:parceler-api:1.1.6'
    apt 'org.parceler:parceler:1.1.6'

    compile 'com.jakewharton:butterknife:8.5.1'
    apt 'com.jakewharton:butterknife-compiler:8.5.1'

    compile 'com.jakewharton.timber:timber:4.1.1'

    compile "com.squareup.haha:haha:2.0.3"

    compile 'com.android.support:multidex:1.0.1'

    testCompile 'junit:junit:4.12'

    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.5.1'
}

def getAppVersionCode() {
    def strVersion = project.version.toString();
    def dblVersion = strVersion.substring(0, strVersion.lastIndexOf('.') - 1) as Double;
    return BigDecimal.valueOf(dblVersion) as int
}

def getTeamcityPropertyString(String property, String defaultValue) {
    if (isTeamcityBuild) {
        def value = teamcity[property]
        if (value != null) {
            return value as String
        }
    }
    return defaultValue
}

def getTeamcityPropertyInt(String property, int defaultValue) {
    if (isTeamcityBuild) {
        def value = teamcity[property]
        if (value != null) {
            return value as int
        }
    }
    return defaultValue
}
